// 7573253327:AAGK3qD_q2ZEx2bZ599xm8UsxpBrJdjprmo
// 1002188856350

require('dotenv').config();
const axios = require('axios');
const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const fs = require('fs');

const app = express();
const PORT = 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–ø–∫–∏ `data`
function loadAllItems() {
  const dataPath = path.join(__dirname, 'data');
  const files = fs.readdirSync(dataPath);
  return files.map((file) => JSON.parse(fs.readFileSync(path.join(dataPath, file), 'utf-8')));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
function loadItemByRoute(route) {
  const items = loadAllItems();
  return items.find((item) => item.route === route) || null;
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  const items = loadAllItems();

  const gridHtml = items.map(
    (item) => `<li><a href='/item/${item.route}'>${item.name}</a></li>`
  ).join('');

  const itemsInfo = items.map((item) => `<a href='/item/${item.route}' class="service-info">
    <img src='${item.icon}' alt='${item.name}'>
    <h2>${item.name}</h2>
  </a>`).join('');

  const html = renderHtml('views/layout.html', {
    gridHtml, // –ü–µ—Ä–µ–¥–∞–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ layout
    content: renderHtml('views/main.html', {itemsInfo})
  });
  res.send(html);
});

// –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø—É–Ω–∫—Ç–æ–≤
app.get('/item/:route', (req, res) => {
  const items = loadAllItems();
  const item = loadItemByRoute(req.params.route);

  const gridHtml = items.map(
      (item) => `<li><a href='/item/${item.route}'>${item.name}</a></li>`
  ).join('');

  if (!item) {
    return res.status(404).send('<h1>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>');
  }

  const itemServices = item.services ? item.services.map((service) => `<li>
    <h3>${service.name}</h3>
    <p>${service.description}</p>
</li>`).join('') : `<div>–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>`;

  const html = renderHtml('views/layout.html', {
    gridHtml,
    content: renderHtml('views/item.html', {
      itemName: item.name,
      itemDescription: item.description,
      itemIcon: item.icon,
      itemImage: item.image,
      itemServices,
    })
  });
  res.send(html);
});

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è HTML-—Ñ–∞–π–ª–æ–≤
// function renderHtml(filePath, replacements = {}) {
//   let html = fs.readFileSync(path.join(__dirname, filePath), 'utf-8');
//   for (const [key, value] of Object.entries(replacements)) {
//     html = html.replace(new RegExp(`{{${key}}}`, 'g'), value);
//   }
//   return html;
// }

function renderHtml(filePath, replacements = {}) {
  let html = fs.readFileSync(filePath, 'utf-8'); // –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª

  // –ó–∞–≥—Ä—É–∂–∞–µ–º header –∏ footer
  let headerHtml = fs.readFileSync(path.join(__dirname, 'views/header.html'), 'utf-8');
  let footerHtml = fs.readFileSync(path.join(__dirname, 'views/footer.html'), 'utf-8');

  // –ó–∞–º–µ–Ω—è–µ–º gridHtml –≤ header, –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
  if (replacements.gridHtml) {
    headerHtml = headerHtml.replace('{{gridHtml}}', replacements.gridHtml);
  }

  // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º header –∏ footer –≤ –æ—Å–Ω–æ–≤–Ω–æ–π HTML
  replacements.header = headerHtml;
  replacements.footer = footerHtml;

  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö {{–∫–ª—é—á–µ–π}} –≤ –æ—Å–Ω–æ–≤–Ω–æ–π HTML
  for (const [key, value] of Object.entries(replacements)) {
    html = html.replace(new RegExp(`{{${key}}}`, 'g'), value);
  }

  return html;
}

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID;


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
app.post('/submit-form', async (req, res) => {
  const { name, phone, email, problem, consultationType } = req.body;

  // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
  const message = `
  üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:
  - –ò–º—è: ${name}
  - –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
  - Email: ${email}
  - –ü—Ä–æ–±–ª–µ–º–∞: ${problem}
  - –§–æ—Ä–º–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: ${consultationType}
  `;

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      chat_id: TELEGRAM_CHANNEL_ID,
      text: message,
    });

    res.send('<h1>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</h1>');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    res.status(500).send('<h1>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</h1>');
  }
});


// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
